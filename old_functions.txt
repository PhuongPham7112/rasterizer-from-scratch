//// interpolate with x as dependent variable andd y as independent variable
//void interpolate(std::vector<int>& vec, int x0, int y0, int x1, int y1) {
//	if (y0 > y1) {
//		std::swap(x0, x1);
//		std::swap(y0, y1);
//	}
//	int dx = x1 - x0;
//	int dy = y1 - y0;
//    for (int y=y0; y<=y1; y++) {
//		if (dy != 0) {
//			int x = x0 + (dx * (y - y0)) / dy;
//			vec.push_back(x);
//			continue;
//		} else {
//			vec.push_back(x0);
//			continue;
//		}
//    }
//}
//
//bool compareVertices(Vec2i x0, Vec2i x1) {
//	return (x0.y < x1.y);
//}
//
//// horizontal scanline algorithm: https://gabrielgambetta.com/computer-graphics-from-scratch/07-filled-triangles.html
//void triangleSweepLine(Vec2i t0, Vec2i t1, Vec2i t2, TGAImage &image, TGAColor color) { 
//
//	// sort the vertices by y coordinate
//	std::vector<Vec2i> vertices;
//	vertices.push_back(t0); // lowest point
//	vertices.push_back(t1); 
//	vertices.push_back(t2); // highest point
//	std::sort(vertices.begin(), vertices.end(), compareVertices);
//
//	// fill the triangle
//	std::vector<int> left_side;
//	std::vector<int> right_side;
//	std::vector<int> p01; // point between t0 and t1
//	std::vector<int> p12; // point between t1 and t2
//	std::vector<int> p02; // point between t0 and t2
//
//
//	// short side
//	interpolate(p01, vertices[0].x, vertices[0].y, vertices[1].x, vertices[1].y);
//	interpolate(p12, vertices[1].x, vertices[1].y, vertices[2].x, vertices[2].y);
//	// remove the redundant point
//	p01.pop_back();
//	// combine p01 and p12
//	p01.insert(p01.end(), p12.begin(), p12.end());
//
//
//	// tall side
//	interpolate(p02, vertices[0].x, vertices[0].y, vertices[2].x, vertices[2].y);
//
//	// determine which side is left and which side is right
//	int middleIdx = p01.size() / 2;
//	if (p01[middleIdx] < p02[middleIdx]) {
//		left_side = p01;
//		right_side = p02;
//	} else {
//		left_side = p02;
//		right_side = p01;
//	}
//
//	// filling in the triangle
//	for (int y = vertices[0].y; y <= vertices[2].y; y++) {
//		for (int x = left_side[y - vertices[0].y]; x <= right_side[y - vertices[0].y]; x++) {
//			image.set(x, y, color);
//		}
//	}
//}
//Approach 1: too much float error
// Vec3f result;
//Vec3f v0 = B - A;
//Vec3f v1 = C - A;
//Vec3f v2 = P - A;
//float d00 = v0 * v0;
//float d01 = v0 * v1;
//float d11 = v1 * v1;
//float d20 = v2 * v0;
//float d21 = v2 * v1;
//float d = d00 * d11 - d01 * d01;
//result.y = (d11 * d20 - d01 * d21) / d;
//result.z = (d00 * d21 - d01 * d20) / d;
//result.x = 1.0f - result.z - result.y;
//return result;